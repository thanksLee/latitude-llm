# Cloudflare 터널 및 다중 도메인 지원을 위한 최종 docker-compose.yaml 파일입니다.
services:
  # =================================================================
  # Traefik 서비스 (Cloudflare 사용에 맞게 간소화)
  # =================================================================
  traefik:
    image: traefik
    container_name: traefik
    restart: always
    command:
      - "--api=true"
      - "--ping=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.http.address=:80"
      - "--api.dashboard=true"
      - "--log.level=INFO"
      - "--entrypoints.http.forwardedHeaders.insecure=true"
    ports:
      - "5000:80"
      - "5001:8123"
      - "5010:8082"
      - "5011:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./fileprovider:/etc/traefik:ro
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.dashboard-http.rule=Host(`${TRAEFIK_HOST}`)"
      - "traefik.http.routers.dashboard-http.entrypoints=http"
      - "traefik.http.routers.dashboard-http.service=api@internal"
      - "traefik.http.routers.dashboard-http.middlewares=dashboard-auth"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=admin:${TRAEFIK_ADMIN_PASS}"
    healthcheck:
      test: ["CMD-SHELL", "traefik healthcheck --ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - web

  # mailpit, db, redis는 수정이 필요 없습니다.
  mailpit:
    image: axllent/mailpit
    ports:
      - 8025:8025
      - 1025:1025
    profiles:
      - development
    networks:
      - web

  db:
    image: postgres:15.8
    restart: always
    container_name: latitude-llm-db
    ports:
      - '5432:5432'
    env_file:
      - .env
    volumes:
      - ./docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - ./docker/pgdata:/var/lib/postgresql/data
    networks:
      - web

  redis:
    image: redis
    restart: always
    container_name: latitude-llm-redis
    ports:
      - '6379:6379'
    networks:
      - web

  # =================================================================
  # Web 서비스 (라우팅 규칙을 .env 파일과 연동)
  # =================================================================
  web:
    image: ghcr.io/latitude-dev/web:latest
    restart: always
    container_name: latitude-llm-web
    platform: linux/amd64
    env_file:
      - .env
    ports:
      - '5100:8080'
    volumes:
      - shared-storage:/app/storage/files:rw
      - shared-storage:/app/apps/web/public/files:rw
    environment:
      - NEXT_SERVER_ACTIONS_ENCRYPTION_KEY=${NEXT_SERVER_ACTIONS_ENCRYPTION_KEY}
    build:
      args:
        - NEXT_SERVER_ACTIONS_ENCRYPTION_KEY=${NEXT_SERVER_ACTIONS_ENCRYPTION_KEY}
    labels:
      # --- 수정된 부분 시작 ---
      # 제안해주신 새로운 도메인 구조로 Host 규칙을 수정합니다.
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.web-http.rule=Host(`app-latitude.${APP_DOMAIN}`) || Host(`docs-latitude.${APP_DOMAIN}`)"
      - "traefik.http.routers.web-http.entrypoints=http"
      - "traefik.http.routers.web-http.service=web-service"
      - "traefik.http.services.web-service.loadbalancer.server.port=8080"
      # --- 수정된 부분 끝 ---
    depends_on:
      - db
      - redis
      - traefik
    networks:
      - web

  # migrations는 수정이 필요 없습니다.
  migrations:
    image: ghcr.io/latitude-dev/migrations:latest
    container_name: latitude-llm-migrations
    platform: linux/amd64
    env_file:
      - .env
    volumes:
      - shared-storage:/app/storage/files:rw
      - shared-storage:/app/apps/web/public/files:rw
    labels:
      - "traefik.enable=false"
    depends_on:
      - db
    networks:
      - web

  # Gateway, Workers, Websockets 서비스는 기존과 동일합니다.
  gateway:
    image: ghcr.io/latitude-dev/gateway:latest
    restart: always
    container_name: latitude-llm-gateway
    platform: linux/amd64
    env_file:
      - .env
    volumes:
      - shared-storage:/app/storage/files:rw
      - shared-storage:/app/apps/web/public/files:rw
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.gateway-http.rule=Host(`gateway-latitude.${APP_DOMAIN}`)"
      - "traefik.http.routers.gateway-http.entrypoints=http"
      - "traefik.http.routers.gateway-http.service=gateway-service"
      - "traefik.http.services.gateway-service.loadbalancer.server.port=8080"
    depends_on:
      - db
      - redis
    networks:
      - web

  workers:
    image: ghcr.io/latitude-dev/workers:latest
    restart: always
    container_name: latitude-llm-workers
    platform: linux/amd64
    env_file:
      - .env
    volumes:
      - shared-storage:/app/storage/files:rw
      - shared-storage:/app/apps/web/public/files:rw
    depends_on:
      - db
      - redis
    networks:
      - web

  websockets:
    image: ghcr.io/latitude-dev/websockets:latest
    restart: always
    container_name: latitude-llm-websockets
    platform: linux/amd64
    env_file:
      - .env
    volumes:
      - shared-storage:/app/storage/files:rw
      - shared-storage:/app/apps/web/public/files:rw
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.websockets-http.rule=Host(`ws-latitude.${APP_DOMAIN}`)"
      - "traefik.http.routers.websockets-http.entrypoints=http"
      - "traefik.http.routers.websockets-http.service=websockets-service"
      - "traefik.http.services.websockets-service.loadbalancer.server.port=4002"
    depends_on:
      - db
      - redis
    networks:
      - web

networks:
  web:
    external: true

volumes:
  shared-storage:
